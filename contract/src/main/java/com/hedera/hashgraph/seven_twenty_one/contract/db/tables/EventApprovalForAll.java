/*
 * This file is generated by jOOQ.
 */
package com.hedera.hashgraph.seven_twenty_one.contract.db.tables;


import com.hedera.hashgraph.seven_twenty_one.contract.db.Keys;
import com.hedera.hashgraph.seven_twenty_one.contract.db.Public;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventApprovalForAll extends TableImpl<Record> {

    private static final long serialVersionUID = -289480671;

    /**
     * The reference instance of <code>public.event_approval_for_all</code>
     */
    public static final EventApprovalForAll EVENT_APPROVAL_FOR_ALL = new EventApprovalForAll();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.event_approval_for_all.timestamp</code>.
     */
    public final TableField<Record, Long> TIMESTAMP = createField(DSL.name("timestamp"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.event_approval_for_all.owner_address_id</code>.
     */
    public final TableField<Record, Long> OWNER_ADDRESS_ID = createField(DSL.name("owner_address_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.event_approval_for_all.operator_address_id</code>.
     */
    public final TableField<Record, Long> OPERATOR_ADDRESS_ID = createField(DSL.name("operator_address_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.event_approval_for_all.approved</code>.
     */
    public final TableField<Record, Boolean> APPROVED = createField(DSL.name("approved"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * Create a <code>public.event_approval_for_all</code> table reference
     */
    public EventApprovalForAll() {
        this(DSL.name("event_approval_for_all"), null);
    }

    /**
     * Create an aliased <code>public.event_approval_for_all</code> table reference
     */
    public EventApprovalForAll(String alias) {
        this(DSL.name(alias), EVENT_APPROVAL_FOR_ALL);
    }

    /**
     * Create an aliased <code>public.event_approval_for_all</code> table reference
     */
    public EventApprovalForAll(Name alias) {
        this(alias, EVENT_APPROVAL_FOR_ALL);
    }

    private EventApprovalForAll(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private EventApprovalForAll(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> EventApprovalForAll(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, EVENT_APPROVAL_FOR_ALL);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.EVENT_APPROVAL_FOR_ALL_PKEY;
    }

    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.EVENT_APPROVAL_FOR_ALL_PKEY);
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.<ForeignKey<Record, ?>>asList(Keys.EVENT_APPROVAL_FOR_ALL__EVENT_APPROVAL_FOR_ALL_OWNER_ADDRESS_ID_FKEY, Keys.EVENT_APPROVAL_FOR_ALL__EVENT_APPROVAL_FOR_ALL_OPERATOR_ADDRESS_ID_FKEY);
    }

    public Address eventApprovalForAllOwnerAddressIdFkey() {
        return new Address(this, Keys.EVENT_APPROVAL_FOR_ALL__EVENT_APPROVAL_FOR_ALL_OWNER_ADDRESS_ID_FKEY);
    }

    public Address eventApprovalForAllOperatorAddressIdFkey() {
        return new Address(this, Keys.EVENT_APPROVAL_FOR_ALL__EVENT_APPROVAL_FOR_ALL_OPERATOR_ADDRESS_ID_FKEY);
    }

    @Override
    public EventApprovalForAll as(String alias) {
        return new EventApprovalForAll(DSL.name(alias), this);
    }

    @Override
    public EventApprovalForAll as(Name alias) {
        return new EventApprovalForAll(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EventApprovalForAll rename(String name) {
        return new EventApprovalForAll(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventApprovalForAll rename(Name name) {
        return new EventApprovalForAll(name, null);
    }
}
