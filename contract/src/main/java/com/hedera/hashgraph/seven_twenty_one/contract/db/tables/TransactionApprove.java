/*
 * This file is generated by jOOQ.
 */
package com.hedera.hashgraph.seven_twenty_one.contract.db.tables;


import com.hedera.hashgraph.seven_twenty_one.contract.db.Keys;
import com.hedera.hashgraph.seven_twenty_one.contract.db.Public;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TransactionApprove extends TableImpl<Record> {

    private static final long serialVersionUID = 1073364627;

    /**
     * The reference instance of <code>public.transaction_approve</code>
     */
    public static final TransactionApprove TRANSACTION_APPROVE = new TransactionApprove();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.transaction_approve.timestamp</code>.
     */
    public final TableField<Record, Long> TIMESTAMP = createField(DSL.name("timestamp"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.transaction_approve.spender_address_id</code>.
     */
    public final TableField<Record, Long> SPENDER_ADDRESS_ID = createField(DSL.name("spender_address_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.transaction_approve.token_id</code>.
     */
    public final TableField<Record, BigInteger> TOKEN_ID = createField(DSL.name("token_id"), org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(78).nullable(false), this, "");

    /**
     * Create a <code>public.transaction_approve</code> table reference
     */
    public TransactionApprove() {
        this(DSL.name("transaction_approve"), null);
    }

    /**
     * Create an aliased <code>public.transaction_approve</code> table reference
     */
    public TransactionApprove(String alias) {
        this(DSL.name(alias), TRANSACTION_APPROVE);
    }

    /**
     * Create an aliased <code>public.transaction_approve</code> table reference
     */
    public TransactionApprove(Name alias) {
        this(alias, TRANSACTION_APPROVE);
    }

    private TransactionApprove(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private TransactionApprove(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> TransactionApprove(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, TRANSACTION_APPROVE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.TRANSACTION_APPROVE_PKEY;
    }

    @Override
    public List<UniqueKey<Record>> getKeys() {
        return Arrays.<UniqueKey<Record>>asList(Keys.TRANSACTION_APPROVE_PKEY);
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.<ForeignKey<Record, ?>>asList(Keys.TRANSACTION_APPROVE__TRANSACTION_APPROVE_SPENDER_ADDRESS_ID_FKEY);
    }

    public Address address() {
        return new Address(this, Keys.TRANSACTION_APPROVE__TRANSACTION_APPROVE_SPENDER_ADDRESS_ID_FKEY);
    }

    @Override
    public TransactionApprove as(String alias) {
        return new TransactionApprove(DSL.name(alias), this);
    }

    @Override
    public TransactionApprove as(Name alias) {
        return new TransactionApprove(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionApprove rename(String name) {
        return new TransactionApprove(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionApprove rename(Name name) {
        return new TransactionApprove(name, null);
    }
}
